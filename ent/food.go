// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"foodly/ent/food"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// Food is the model entity for the Food schema.
type Food struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Desc holds the value of the "desc" field.
	Desc string `json:"desc,omitempty"`
	// Price holds the value of the "price" field.
	Price string `json:"price,omitempty"`
	// ImageName holds the value of the "image_name" field.
	ImageName string `json:"image_name,omitempty"`
	// Restaurant holds the value of the "restaurant" field.
	Restaurant string `json:"restaurant,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Food) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // desc
		&sql.NullString{}, // price
		&sql.NullString{}, // image_name
		&sql.NullString{}, // restaurant
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Food fields.
func (f *Food) assignValues(values ...interface{}) error {
	if m, n := len(values), len(food.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	f.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		f.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field desc", values[1])
	} else if value.Valid {
		f.Desc = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field price", values[2])
	} else if value.Valid {
		f.Price = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field image_name", values[3])
	} else if value.Valid {
		f.ImageName = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field restaurant", values[4])
	} else if value.Valid {
		f.Restaurant = value.String
	}
	return nil
}

// Update returns a builder for updating this Food.
// Note that, you need to call Food.Unwrap() before calling this method, if this Food
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Food) Update() *FoodUpdateOne {
	return (&FoodClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (f *Food) Unwrap() *Food {
	tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Food is not a transactional entity")
	}
	f.config.driver = tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Food) String() string {
	var builder strings.Builder
	builder.WriteString("Food(")
	builder.WriteString(fmt.Sprintf("id=%v", f.ID))
	builder.WriteString(", name=")
	builder.WriteString(f.Name)
	builder.WriteString(", desc=")
	builder.WriteString(f.Desc)
	builder.WriteString(", price=")
	builder.WriteString(f.Price)
	builder.WriteString(", image_name=")
	builder.WriteString(f.ImageName)
	builder.WriteString(", restaurant=")
	builder.WriteString(f.Restaurant)
	builder.WriteByte(')')
	return builder.String()
}

// Foods is a parsable slice of Food.
type Foods []*Food

func (f Foods) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
