// Code generated by entc, DO NOT EDIT.

package food

import (
	"foodly/ent/predicate"

	"github.com/facebook/ent/dialect/sql"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Restaurant applies equality check predicate on the "restaurant" field. It's identical to RestaurantEQ.
func Restaurant(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRestaurant), v))
	})
}

// Desc applies equality check predicate on the "desc" field. It's identical to DescEQ.
func Desc(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDesc), v))
	})
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// ImageName applies equality check predicate on the "image_name" field. It's identical to ImageNameEQ.
func ImageName(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImageName), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Food {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Food(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Food {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Food(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// RestaurantEQ applies the EQ predicate on the "restaurant" field.
func RestaurantEQ(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRestaurant), v))
	})
}

// RestaurantNEQ applies the NEQ predicate on the "restaurant" field.
func RestaurantNEQ(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRestaurant), v))
	})
}

// RestaurantIn applies the In predicate on the "restaurant" field.
func RestaurantIn(vs ...string) predicate.Food {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Food(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRestaurant), v...))
	})
}

// RestaurantNotIn applies the NotIn predicate on the "restaurant" field.
func RestaurantNotIn(vs ...string) predicate.Food {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Food(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRestaurant), v...))
	})
}

// RestaurantGT applies the GT predicate on the "restaurant" field.
func RestaurantGT(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRestaurant), v))
	})
}

// RestaurantGTE applies the GTE predicate on the "restaurant" field.
func RestaurantGTE(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRestaurant), v))
	})
}

// RestaurantLT applies the LT predicate on the "restaurant" field.
func RestaurantLT(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRestaurant), v))
	})
}

// RestaurantLTE applies the LTE predicate on the "restaurant" field.
func RestaurantLTE(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRestaurant), v))
	})
}

// RestaurantContains applies the Contains predicate on the "restaurant" field.
func RestaurantContains(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRestaurant), v))
	})
}

// RestaurantHasPrefix applies the HasPrefix predicate on the "restaurant" field.
func RestaurantHasPrefix(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRestaurant), v))
	})
}

// RestaurantHasSuffix applies the HasSuffix predicate on the "restaurant" field.
func RestaurantHasSuffix(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRestaurant), v))
	})
}

// RestaurantEqualFold applies the EqualFold predicate on the "restaurant" field.
func RestaurantEqualFold(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRestaurant), v))
	})
}

// RestaurantContainsFold applies the ContainsFold predicate on the "restaurant" field.
func RestaurantContainsFold(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRestaurant), v))
	})
}

// DescEQ applies the EQ predicate on the "desc" field.
func DescEQ(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDesc), v))
	})
}

// DescNEQ applies the NEQ predicate on the "desc" field.
func DescNEQ(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDesc), v))
	})
}

// DescIn applies the In predicate on the "desc" field.
func DescIn(vs ...string) predicate.Food {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Food(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDesc), v...))
	})
}

// DescNotIn applies the NotIn predicate on the "desc" field.
func DescNotIn(vs ...string) predicate.Food {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Food(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDesc), v...))
	})
}

// DescGT applies the GT predicate on the "desc" field.
func DescGT(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDesc), v))
	})
}

// DescGTE applies the GTE predicate on the "desc" field.
func DescGTE(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDesc), v))
	})
}

// DescLT applies the LT predicate on the "desc" field.
func DescLT(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDesc), v))
	})
}

// DescLTE applies the LTE predicate on the "desc" field.
func DescLTE(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDesc), v))
	})
}

// DescContains applies the Contains predicate on the "desc" field.
func DescContains(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDesc), v))
	})
}

// DescHasPrefix applies the HasPrefix predicate on the "desc" field.
func DescHasPrefix(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDesc), v))
	})
}

// DescHasSuffix applies the HasSuffix predicate on the "desc" field.
func DescHasSuffix(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDesc), v))
	})
}

// DescEqualFold applies the EqualFold predicate on the "desc" field.
func DescEqualFold(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDesc), v))
	})
}

// DescContainsFold applies the ContainsFold predicate on the "desc" field.
func DescContainsFold(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDesc), v))
	})
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrice), v))
	})
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...string) predicate.Food {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Food(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrice), v...))
	})
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...string) predicate.Food {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Food(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrice), v...))
	})
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrice), v))
	})
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrice), v))
	})
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrice), v))
	})
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrice), v))
	})
}

// PriceContains applies the Contains predicate on the "price" field.
func PriceContains(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPrice), v))
	})
}

// PriceHasPrefix applies the HasPrefix predicate on the "price" field.
func PriceHasPrefix(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPrice), v))
	})
}

// PriceHasSuffix applies the HasSuffix predicate on the "price" field.
func PriceHasSuffix(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPrice), v))
	})
}

// PriceEqualFold applies the EqualFold predicate on the "price" field.
func PriceEqualFold(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPrice), v))
	})
}

// PriceContainsFold applies the ContainsFold predicate on the "price" field.
func PriceContainsFold(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPrice), v))
	})
}

// ImageNameEQ applies the EQ predicate on the "image_name" field.
func ImageNameEQ(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImageName), v))
	})
}

// ImageNameNEQ applies the NEQ predicate on the "image_name" field.
func ImageNameNEQ(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImageName), v))
	})
}

// ImageNameIn applies the In predicate on the "image_name" field.
func ImageNameIn(vs ...string) predicate.Food {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Food(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldImageName), v...))
	})
}

// ImageNameNotIn applies the NotIn predicate on the "image_name" field.
func ImageNameNotIn(vs ...string) predicate.Food {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Food(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldImageName), v...))
	})
}

// ImageNameGT applies the GT predicate on the "image_name" field.
func ImageNameGT(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImageName), v))
	})
}

// ImageNameGTE applies the GTE predicate on the "image_name" field.
func ImageNameGTE(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImageName), v))
	})
}

// ImageNameLT applies the LT predicate on the "image_name" field.
func ImageNameLT(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImageName), v))
	})
}

// ImageNameLTE applies the LTE predicate on the "image_name" field.
func ImageNameLTE(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImageName), v))
	})
}

// ImageNameContains applies the Contains predicate on the "image_name" field.
func ImageNameContains(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldImageName), v))
	})
}

// ImageNameHasPrefix applies the HasPrefix predicate on the "image_name" field.
func ImageNameHasPrefix(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldImageName), v))
	})
}

// ImageNameHasSuffix applies the HasSuffix predicate on the "image_name" field.
func ImageNameHasSuffix(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldImageName), v))
	})
}

// ImageNameEqualFold applies the EqualFold predicate on the "image_name" field.
func ImageNameEqualFold(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldImageName), v))
	})
}

// ImageNameContainsFold applies the ContainsFold predicate on the "image_name" field.
func ImageNameContainsFold(v string) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldImageName), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Food) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Food) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Food) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		p(s.Not())
	})
}
